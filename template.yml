AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: |
  SAM template for a banking transaction system with intuitive transaction types.
  Includes Cognito User Pool authentication for API Gateway and a custom login/refresh proxy.

Parameters:
  Environment:
    Type: String
    Description: The deployment environment (e.g. dev, test, prod).
    AllowedValues:
      - dev
      - test
      - prod
    Default: dev

Globals:
  Function:
    Runtime: python3.12
    MemorySize: 128
    Timeout: 90
    Tracing: Active
    Environment:
      Variables:
        POWERTOOLS_LOG_LEVEL: INFO
        POWERTOOLS_SERVICE_NAME: transactions
        ENVIRONMENT_NAME: !Ref Environment

Resources:
  # --- Cognito User Pool ---
  BankingUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-user-pool-${Environment}
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  BankingUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}-user-pool-client-${Environment}
      UserPoolId: !Ref BankingUserPool
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      AccessTokenValidity: 15
      IdTokenValidity: 15
      RefreshTokenValidity: 30

  # --- API Gateway ---
  BankingApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-transaction-api
      StageName: !Ref Environment
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt BankingUserPool.Arn

  # --- Lambda Functions ---
  RecordTransactionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-record-transaction
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName} for Stage ${Environment}
        - ResourceName: RecordTransactionFunction
      CodeUri: functions/record_transactions/
      Handler: record_transactions.app.lambda_handler
      Environment:
        Variables:
          TRANSACTIONS_TABLE_NAME: !Ref TransactionsTable
          DYNAMODB_ENDPOINT: ""
          COGNITO_USER_POOL_ID: !Ref BankingUserPool
          COGNITO_CLIENT_ID: !Ref BankingUserPoolClient
      Events:
        ApiSaveTransactionEvent:
          Type: Api
          Properties:
            Path: /save/transaction
            Method: POST
            RestApiId: !Ref BankingApiGateway
            Auth:
              Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TransactionsTable

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-auth
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName} for Stage ${Environment}
        - ResourceName: AuthFunction
      CodeUri: functions/auth/
      Handler: auth.app.lambda_handler
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref BankingUserPool
          COGNITO_CLIENT_ID: !Ref BankingUserPoolClient
      Events:
        ApiLoginEvent:
          Type: Api
          Properties:
            Path: /auth/login
            Method: POST
            RestApiId: !Ref BankingApiGateway
            Auth:
              Authorizer: NONE
        ApiTokenRefreshEvent:
          Type: Api
          Properties:
            Path: /auth/refresh
            Method: POST
            RestApiId: !Ref BankingApiGateway
            Auth:
              Authorizer: NONE
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:InitiateAuth
              - cognito-idp:RespondToAuthChallenge
              - cognito-idp:AdminInitiateAuth
              - cognito-idp:AdminRespondToAuthChallenge
            Resource: !GetAtt BankingUserPool.Arn

  RecordTransactionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${RecordTransactionFunction}
      RetentionInDays: 7

  AuthFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${AuthFunction}
      RetentionInDays: 7

  # --- DynamoDB Table for Transactions ---
  TransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-transactions-table
      AttributeDefinitions:
        - AttributeName: idempotencyKey
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      KeySchema:
        - AttributeName: idempotencyKey
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TransactionIdIndex
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttlTimestamp
        Enabled: true

  # Domain Configuration
  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub '{{resolve:ssm:/banking-app/${Environment}/DomainName}}'
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub '{{resolve:ssm:/banking-app/${Environment}/DomainName}}'
          HostedZoneId: !Sub '{{resolve:ssm:/banking-app/${Environment}/Route53HostedZoneId}}'

  ApiGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub '{{resolve:ssm:/banking-app/${Environment}/DomainName}}'
      RegionalCertificateArn: !Ref ApiCertificate
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  ApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: BankingApiGatewayStage
    Properties:
      DomainName: !Ref ApiGatewayDomainName
      RestApiId: !Ref BankingApiGateway
      Stage: !Ref Environment

  ApiDomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Sub '{{resolve:ssm:/banking-app/${Environment}/Route53HostedZoneId}}'
      Name: !Sub '{{resolve:ssm:/banking-app/${Environment}/DomainName}}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiGatewayDomainName.RegionalDomainName
        HostedZoneId: !GetAtt ApiGatewayDomainName.RegionalHostedZoneId